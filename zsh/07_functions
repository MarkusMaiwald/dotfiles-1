function extract() {
    unset REMOVE_ARCHIVE
    
    if test "$1" = "-r"; then
        REMOVE=1
        shift
    fi
  if [[ -f $1 ]]; then
    case $1 in
      *.tar.bz2) tar xvjf $1;;
      *.tar.gz) tar xvzf $1;;
      *.tar.xz) tar xvJf $1;;
      *.tar.lzma) tar --lzma -xvf $1;;
      *.bz2) bunzip $1;;
      *.rar) unrar $1;;
      *.gz) gunzip $1;;
      *.tar) tar xvf $1;;
      *.tbz2) tar xvjf $1;;
      *.tgz) tar xvzf $1;;
      *.zip) unzip $1;;
      *.Z) uncompress $1;;
      *.7z) 7z x $1;;
      *) echo "'$1' cannot be extracted via >extract<";;
    esac

    if [[ $REMOVE_ARCHIVE -eq 1 ]]; then
        echo removing "$1";
        /bin/rm "$1";
    fi

  else
    echo "'$1' is not a valid file"
  fi
}

function markdown() {
  tmpfile=$(mktemp /tmp/markdown.XXXXXX)
  cat $1 | markdown.pl > $tmpfile
  mv $tmpfile $tmpfile.html
  open $tmpfile.html
}

function pow() {
  appname=$(basename $(pwd))

  if [[ ! -L ~/.pow/$appname ]]; then
    appdir=`pwd`
    ln -s $appdir ~/.pow/$appname
    echo "Pow configured: http://$appname.dev"
  fi
  open http://$appname.dev
}

function git-current-branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

function git-track() {
  remote=${1:-"origin"}
  branch=$(git-current-branch)
  git branch --set-upstream $branch $remote/$branch
}

function git-commits-behind() {
  git rev-list --count --left-only @{upstream}...HEAD
}

function git-commits-ahead() {
  git rev-list --count --right-only @{upstream}...HEAD
}

function git-can-ff() {
  a="$(git rev-parse "$1")" &&
  test "$(git merge-base "$a" "$2")" = "$a"
}

if [ "$commands[(I)hub]" ]; then
    # eval `hub alias -s zsh`
    function git(){hub "$@"}
fi

function manp() {
  man -t $* | ps2pdf - - | open -f -a Preview
}

